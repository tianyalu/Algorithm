package com.sty.foroffer.dynamicprograming;

/**
 *  求一个数组中和最大的连续子序列
 *  ①题目：
 *      输入一个整数数组，数组里有正数也有负数，数组中一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。
 *    要求时间复杂度为`O(n)`。
 *      举例说明：例如输入的数组为`{1, -2, 3, 10, -4, 7, 2, -5}`，和最大的子数组为`{3, 10, -4, 7, 2}`，
 *    因此输出为该子数组的和18。
 *
 *  ②算法思路：
 *      **方案零：分析数组的规律**
 *      我们试着从头到尾逐个累加示例数组中的每个数字，初始化和为0。第一步加上第一个数字1，此时和为1；接下来第二步
 *    加上数字-2，和就变成了-1；第三步加上数字3，我们注意到由于此前累计的和是-1，小于0，那如果用-1加上3得到的和是2，
 *    比3本身还小。也就是说从第一个数字开始的子数组的和会小于从第三个数字开始的子数组的和，因此我们不用考虑从第一个
 *    数组开始的子数组，之前累计的和也被抛弃。
 *      我们从第三数字重新开始累加，此时得到的和是3，接下来第四步加10，得到和为13；第五步加上-4，和为9.我们发现
 *    由于-4是一个负数，因此累加-4之后得到的比原来的和还要小。因此我们要把之前得到的和13保存下来，它有可能是最大
 *    的子数组的和；第六步加上数字7，9加7的结果是16，此时和比之前最大的和13还要大，把最大的子数组的和由13更新为16；
 *    第七步加上2，累加得到的和为18，同时我们也要更新最大子数组的和；第八步加上最后一个数字-5，由于得到的和为13，
 *    小于此前最大的和18，因此最终最大的子数组的和为18，对应的子数组是`{3, 10, -4, 7, 2}`。
 *
 * @Author: tian
 * @UpdateDate: 2021/3/6 5:05 PM
 */
public class MaxSumOfSubArray {

    public static void main(String[] args) {
        int[] arr = {1, -2, 3, 10, -4, 7, 2, -5};
        System.out.println(findMaximumSumOfSubArray(arr));
    }

    /**              ↓
     * arr    1  -2  3  10  -4  7  2  -5
     * curMax 1  -1  3  13   9 16 18  13
     * max    1   1  3  13  13 16 18  18
     * 求一个数组中和最大的连续子序列
     * @param arr 输入的数组
     * @return 最大子序列的和
     */
    public static int findMaximumSumOfSubArray(int[] arr) {
        //参数校验
        if(arr == null || arr.length == 0) {
            throw new IllegalArgumentException("Array must contain an element");
        }

        //记录最大的子数组和，开始时是最小的整数
        int max = Integer.MIN_VALUE;
        //当前的和
        int curMax = 0;
        //数组遍历
        for (int i : arr) {
            //如果当前和小于等于0，就重新设置当前和
            if(curMax <= 0) {
                curMax = i;
            }else { //如果当前和大于0，累加当前和
                curMax += i;
            }

            //更新记录到最新的子数组和
            if(max < curMax) {
                max = curMax;
            }
        }

        return max;
    }
}
